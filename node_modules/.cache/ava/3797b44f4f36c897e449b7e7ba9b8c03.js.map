{"version":3,"sources":["index.test.js"],"names":["nuxt","test","before","t","rootDir","__dirname","config","require","e","dev","mode","Nuxt","Builder","build","listen","context","html","renderRoute","true","includes","window","renderAndGetWindow","element","document","querySelector","not","is","textContent","className","getComputedStyle","color","after","close"],"mappings":";;;;;AAAA;;;;AACA;;AACA;;;;AAEA;AACA;AACA,IAAIA,OAAO,IAAX;;AAEA;AACAC,cAAKC,MAAL,CAAY,cAAZ,EAA4B,MAAMC,CAAN,IAAW;AACrC,QAAMC,UAAU,mBAAQC,SAAR,EAAmB,IAAnB,CAAhB;AACA,MAAIC,SAAS,EAAb;AACA,MAAI;AAAEA,aAASC,QAAQ,mBAAQH,OAAR,EAAiB,gBAAjB,CAAR,CAAT;AAAsD,GAA5D,CAA6D,OAAOI,CAAP,EAAU,CAAE;AACzEF,SAAOF,OAAP,GAAiBA,OAAjB,CAJqC,CAIZ;AACzBE,SAAOG,GAAP,GAAa,KAAb,CALqC,CAKlB;AACnBH,SAAOI,IAAP,GAAc,WAAd,CANqC,CAMX;AAC1BV,SAAO,IAAIW,UAAJ,CAASL,MAAT,CAAP;AACA,QAAM,IAAIM,aAAJ,CAAYZ,IAAZ,EAAkBa,KAAlB,EAAN;AACAb,OAAKc,MAAL,CAAY,IAAZ,EAAkB,WAAlB;AACD,CAVD;;AAYA;AACA,mBAAK,+BAAL,EAAsC,MAAMX,CAAN,IAAW;AAAA;;AAC/C,MAAIY,UAAU,EAAd;AACA,QAAM,EAAEC,IAAF,KAAW,MAAMhB,KAAKiB,WAAL,CAAiB,GAAjB,EAAsBF,OAAtB,CAAvB;AACAZ,IAAEe,IAAF,uBAAO,8CAAKC,QAAL,CAAc,mCAAd,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,CAJD;;AAMA;AACA,mBAAK,gDAAL,EAAuD,MAAMhB,CAAN,IAAW;AAChE,QAAMiB,SAAS,MAAMpB,KAAKqB,kBAAL,CAAwB,wBAAxB,CAArB;AACA,QAAMC,UAAUF,OAAOG,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,CAAhB;AACArB,IAAEsB,GAAF,CAAMH,OAAN,EAAe,IAAf;AACAnB,IAAEuB,EAAF,CAAKJ,QAAQK,WAAb,EAA0B,cAA1B;AACAxB,IAAEuB,EAAF,CAAKJ,QAAQM,SAAb,EAAwB,KAAxB;AACAzB,IAAEuB,EAAF,CAAKN,OAAOS,gBAAP,CAAwBP,OAAxB,EAAiCQ,KAAtC,EAA6C,KAA7C;AACD,CAPD;;AASA;AACA7B,cAAK8B,KAAL,CAAW,gBAAX,EAA6B5B,KAAK;AAChCH,OAAKgC,KAAL;AACD,CAFD","file":"index.test.js","sourcesContent":["import test from 'ava'\nimport { Nuxt, Builder } from 'nuxt'\nimport { resolve } from 'path'\n\n// We keep a reference to Nuxt so we can close\n// the server at the end of the test\nlet nuxt = null\n\n// Init Nuxt.js and start listening on localhost:4000\ntest.before('Init Nuxt.js', async t => {\n  const rootDir = resolve(__dirname, '..')\n  let config = {}\n  try { config = require(resolve(rootDir, 'nuxt.config.js')) } catch (e) {}\n  config.rootDir = rootDir // project folder\n  config.dev = false // production build\n  config.mode = 'universal' // Isomorphic application\n  nuxt = new Nuxt(config)\n  await new Builder(nuxt).build()\n  nuxt.listen(4000, 'localhost')\n})\n\n// Example of testing only generated html\ntest('Route / exits and render HTML', async t => {\n  let context = {}\n  const { html } = await nuxt.renderRoute('/', context)\n  t.true(html.includes('<h1 class=\"red\">Hello world!</h1>'))\n})\n\n// Example of testing via DOM checking\ntest('Route / exits and render HTML with CSS applied', async t => {\n  const window = await nuxt.renderAndGetWindow('http://localhost:4000/')\n  const element = window.document.querySelector('.red')\n  t.not(element, null)\n  t.is(element.textContent, 'Hello world!')\n  t.is(element.className, 'red')\n  t.is(window.getComputedStyle(element).color, 'red')\n})\n\n// Close the Nuxt server\ntest.after('Closing server', t => {\n  nuxt.close()\n})"]}